import json
from pathlib import Path

# Input and output files
INPUT_FILE = "data.json"
OUTPUT_FILE = "data_preprocessed.json"

def extract_useful_sarif(input_path: str, output_path: str):
    with open(input_path, "r", encoding="utf-8") as f:
        sarif = json.load(f)

    run = sarif.get("runs", [])[0]
    results = run.get("results", [])
    rules = {r["id"]: r for r in run["tool"]["driver"].get("rules", [])}

    trimmed = []

    for res in results:
        rule_id = res.get("ruleId")
        rule = rules.get(rule_id, {})
        loc = res.get("locations", [{}])[0].get("physicalLocation", {})
        artifact = loc.get("artifactLocation", {})
        region = loc.get("region", {})

        # Extract useful fields
        summary = {
            "rule_id": rule_id,
            "rule_name": rule.get("shortDescription", {}).get("text"),
            "file": artifact.get("uri"),
            "start_line": region.get("startLine"),
            "end_line": region.get("endLine"),
            "message": res.get("message", {}).get("text"),
            "severity": rule.get("defaultConfiguration", {}).get("level"),
            "description": rule.get("fullDescription", {}).get("text"),
            "help_text": rule.get("properties", {}).get("description"),
            "cwe_tags": [
                tag for tag in rule.get("properties", {}).get("tags", [])
                if "cwe" in tag.lower()
            ]
        }

        summary = {k: v for k, v in summary.items() if v}
        trimmed.append(summary)

    # save to new JSON file
    Path(output_path).write_text(json.dumps(trimmed, indent=2), encoding="utf-8")
    print(f"Extracted {len(trimmed)} SARIF findings â†’ {output_path}")

if __name__ == "__main__":
    extract_useful_sarif(INPUT_FILE, OUTPUT_FILE)
