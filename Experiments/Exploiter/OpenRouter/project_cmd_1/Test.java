
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.io.TempDir;
import java.io.*;
import java.nio.file.*;
import java.util.concurrent.*;

import static org.junit.jupiter.api.Assertions.*;

public class CommandInjectionTest {

    @TempDir
    Path tempDir;

    private static final String CLASS_NAME = "exploiter.sandbox.Main";
    private Path targetDir;
    private Path testFile;

    @BeforeEach
    public void setup() throws IOException {
        targetDir = tempDir.resolve("target");
        Files.createDirectories(targetDir);
        testFile = targetDir.resolve("testfile");
    }

    @Test
    public void testCommandInjectionVulnerability() throws Exception {
        // Test various injection payloads
        String[] payloads = {
            "; touch target/payload1",
            "&& touch target/payload2",
            "|| touch target/payload3",
            "`touch target/payload4`",
            "$(touch target/payload5)"
        };

        boolean exploitationSuccessful = false;
        StringBuilder report = new StringBuilder();
        report.append("Command Injection Vulnerability Analysis Report\n");
        report.append("=============================================\n");
        report.append("Vulnerability: Command injection through unsanitized user input in shell command\n");
        report.append("Description: The code concatenates user input directly into a shell command without sanitization\n");
        report.append("Location: exploiter.sandbox.Main\n");
        report.append("Risk: High - Allows arbitrary command execution\n\n");
        report.append("Test Results:\n");
        report.append("-------------\n");

        for (int i = 0; i < payloads.length; i++) {
            String payload = payloads[i];
            String payloadFileName = "payload" + (i + 1);
            Path payloadFile = targetDir.resolve(payloadFileName);

            try {
                // Execute the vulnerable code with the payload
                String[] command = {
                    "java", "-cp", System.getProperty("java.class.path"),
                    CLASS_NAME, payload
                };

                Process process = Runtime.getRuntime().exec(command);
                
                // Set timeout to avoid hanging
                boolean finished = process.waitFor(10, TimeUnit.SECONDS);
                if (!finished) {
                    process.destroyForcibly();
                }

                // Check if the payload file was created
                boolean payloadFileExists = Files.exists(payloadFile);
                
                report.append("Payload: ").append(payload).append("\n");
                report.append("Result: ").append(payloadFileExists ? "SUCCESS" : "FAILED").append("\n");
                report.append("File created: ").append(payloadFileExists).append("\n\n");
                
                if (payloadFileExists) {
                    exploitationSuccessful = true;
                    // Clean up the created file
                    Files.deleteIfExists(payloadFile);
                }
            } catch (Exception e) {
                report.append("Payload: ").append(payload).append("\n");
                report.append("Result: ERROR - ").append(e.getMessage()).append("\n\n");
            }
        }

        // Test the legitimate testfile creation
        try {
            String[] command = {
                "java", "-cp", System.getProperty("java.class.path"),
                CLASS_NAME, "target"
            };

            Process process = Runtime.getRuntime().exec(command);
            process.waitFor(10, TimeUnit.SECONDS);
            
            boolean legitimateFileExists = Files.exists(testFile);
            report.append("Legitimate test: Command execution with safe input\n");
            report.append("Test file created: ").append(legitimateFileExists).append("\n");
            
            if (legitimateFileExists) {
                Files.deleteIfExists(testFile);
            }
        } catch (Exception e) {
            report.append("Legitimate test failed: ").append(e.getMessage()).append("\n");
        }

        report.append("\nExploitation Status: ").append(exploitationSuccessful ? "YES" : "NO").append("\n");
        report.append("Recommendation: Sanitize user input and use ProcessBuilder with explicit arguments\n");
        report.append("Fix: Avoid shell command concatenation, use ProcessBuilder with separate arguments\n");

        // Write the report to file
        Path reportFile = tempDir.resolve("report.txt");
        Files.write(reportFile, report.toString().getBytes());

        // Assert that the vulnerability was detected
        assertTrue(exploitationSuccessful, "Command injection vulnerability should be exploitable");
    }

    @Test
    public void testSafeInput() throws Exception {
        // Test with safe input to ensure normal functionality
        String[] command = {
            "java", "-cp", System.getProperty("java.class.path"),
            CLASS_NAME, "target"
        };

        try {
            Process process = Runtime.getRuntime().exec(command);
            process.waitFor();
            // Process should execute normally without errors
        } catch (Exception e) {
            // If the class doesn't exist, it's a test environment
            // This should not fail the test
        }
    }
}
