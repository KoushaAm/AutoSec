import requests
import os 
from dotenv import load_dotenv
from utils.models import *
from utils.system_prompts import *
from openai import OpenAI

CODE_DIR = "project_cmd_2/Main.java"
TEST_DIR = "project_cmd_2/Test_auto2.java"

def initialize():
    load_dotenv()
    model = LLAMA3 # model identifier for openrouter
    client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key= os.getenv("OPEN_ROUTER_API_KEY")
    )

    return client, model

def generate(client, model, prompt) : 
    completion = client.chat.completions.create(
  
    model=model,
    messages=[
        {
        "role": "user",
        "content": prompt
        }
    ]
    )

    return completion.choices[0].message.content


client, model = initialize()

# print(generate(client, model))

# prompt = get_sys_prompt(CODE_DIR)
# set prompt to the text file value
text_file = "Analyzer/analysis_output.txt"
with open(text_file, "r", encoding="utf-8") as f:
    prompt = f.read()

# print(prompt)

prompt = prompt + "make sure to import these packages" + """package exploiter.sandbox;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy; \n. """
    
output = generate(client, model, prompt)

output_cleaned = output.strip().replace("```java", "").replace("```", "")

with open(TEST_DIR, "w") as java_file:
    java_file.write(output_cleaned)

print(f"JUnit test written to: {TEST_DIR}")