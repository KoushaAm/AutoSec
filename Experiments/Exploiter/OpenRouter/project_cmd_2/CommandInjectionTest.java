
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mockito;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class CommandInjectionTest {

    private Main main;
    private Runtime mockedRuntime;

    @BeforeEach
    void setUp() throws Exception {
        main = new Main();
        mockedRuntime = Mockito.mock(Runtime.class);
        Field runtimeField = Runtime.class.getDeclaredField("currentRuntime");
        runtimeField.setAccessible(true);
        runtimeField.set(null, mockedRuntime);
    }

    @AfterEach
    void tearDown() throws Exception {
        Field runtimeField = Runtime.class.getDeclaredField("currentRuntime");
        runtimeField.setAccessible(true);
        runtimeField.set(null, Runtime.getRuntime());
    }

    @Test
    void testCommandInjection(@TempDir File tempDir) throws Exception {
        String[] placeholderInputs = {"normal.txt", "file; ls -la", "file && echo x"};

        boolean isExploitable = false;
        for (String input : placeholderInputs) {
            // Set up the mock to capture the command string
            Mockito.reset(mockedRuntime);
            Mockito.when(mockedRuntime.exec(Mockito.any())).thenAnswer(invocation -> {
                String[] command = (String[]) invocation.getArgument(0);
                String cmd = String.join(" ", command);
                if (!cmd.matches("[A-Za-z0-9._-]+")) {
                    isExploitable = true;
                }
                return null;
            });

            // Exercise the suspicious code
            main.backupFiles(new Scanner(input));

            // Verify the output
            Mockito.verify(mockedRuntime).exec(Mockito.any());
        }

        // Write the report
        try (FileWriter writer = new FileWriter(new File(tempDir, "report.txt"))) {
            writer.write("Vulnerability: java/concatenated-command-line\n");
            writer.write("InputsTested: " + Arrays.toString(placeholderInputs) + "\n");
            writer.write("Exploitable: " + (isExploitable ? "YES" : "NO") + "\n");
            writer.write("Rationale: The code is exploitable if any captured command string contains unsanitized characters.\n");
        }

        assertTrue(new File(tempDir, "report.txt").exists());
    }
}
