import java.io.*;
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Main {
    private Map<String, String> userSettings;
    
    public Main() {
        userSettings = new HashMap<>();
        userSettings.put("backup_dir", "/home/user/backups");
        userSettings.put("log_level", "INFO");
    }
    
    public void startMenu() throws IOException {
        Scanner scanner = new Scanner(System.in);
        
        while (true) {
            System.out.println("\n=== System Management Console ===");
            System.out.println("1. Backup Files");
            System.out.println("2. Check Disk Space");
            System.out.println("3. Search Log Files");
            System.out.println("4. Network Diagnostics");
            System.out.println("5. Update System Settings");
            System.out.println("6. Execute Custom Command");
            System.out.println("7. Exit");
            System.out.print("Choose option: ");
            
            String choice = scanner.nextLine();
            
            switch(choice) {
                case "1":
                    backupFiles(scanner);
                    break;
                case "2":
                    checkDiskSpace(scanner);
                    break;
                case "3":
                    searchLogs(scanner);
                    break;
                case "4":
                    networkDiagnostics(scanner);
                    break;
                case "5":
                    updateSettings(scanner);
                    break;
                case "6":
                    executeCustomCommand(scanner);
                    break;
                case "7":
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option!");
            }
        }
    }
    
    // VULNERABLE: Direct command injection in backup command
    private void backupFiles(Scanner scanner) throws IOException {
        System.out.print("Enter directory to backup: ");
        String directory = scanner.nextLine();
        
        // VULNERABILITY 1: Direct concatenation
        String command = "tar -czf backup.tar.gz " + directory;
        executeSystemCommand(command, "Backup");
    }
    
    // VULNERABLE: Command injection in disk check
    private void checkDiskSpace(Scanner scanner) throws IOException {
        System.out.print("Enter partition to check (or 'all' for all partitions): ");
        String partition = scanner.nextLine();
        
        String command;
        if (partition.equalsIgnoreCase("all")) {
            command = "df -h";
        } else {
            // VULNERABILITY 2: User input in command
            command = "df -h " + partition;
        }
        executeSystemCommand(command, "Disk Space Check");
    }
    
    // VULNERABLE: Command injection in log search
    private void searchLogs(Scanner scanner) throws IOException {
        System.out.print("Enter search pattern: ");
        String pattern = scanner.nextLine();
        System.out.print("Enter log file path: ");
        String logFile = scanner.nextLine();
        
        // VULNERABILITY 3: Multiple user inputs in command
        String command = "grep '" + pattern + "' " + logFile + " | head -20";
        executeSystemCommand(command, "Log Search");
    }
    
    // VULNERABLE: Command injection in network tools
    private void networkDiagnostics(Scanner scanner) throws IOException {
        System.out.print("Enter host to ping: ");
        String host = scanner.nextLine();
        System.out.print("Enter number of packets: ");
        String packets = scanner.nextLine();
        
        // VULNERABILITY 4: Multiple parameters concatenated
        String command = "ping -c " + packets + " " + host;
        executeSystemCommand(command, "Network Diagnostics");
    }
    
    // VULNERABLE: Settings update with command injection
    private void updateSettings(Scanner scanner) throws IOException {
        System.out.print("Enter setting name: ");
        String setting = scanner.nextLine();
        System.out.print("Enter setting value: ");
        String value = scanner.nextLine();
        
        userSettings.put(setting, value);
        
        // VULNERABILITY 5: User input in echo command
        String command = "echo 'Setting updated: " + setting + "=" + value + "' >> settings.log";
        executeSystemCommand(command, "Update Settings");
        
        System.out.println("Setting updated successfully!");
    }
    
    // VULNERABLE: Direct command execution
    private void executeCustomCommand(Scanner scanner) throws IOException {
        System.out.print("Enter command to execute: ");
        String userCommand = scanner.nextLine();
        
        // VULNERABILITY 6: Direct command execution
        executeSystemCommand(userCommand, "Custom Command");
    }
    
    // Helper method that executes system commands (ROOT OF VULNERABILITIES)
    private void executeSystemCommand(String command, String operation) throws IOException {
        System.out.println("\nExecuting: " + command);
        System.out.println("=== " + operation + " Output ===");
        
        try {
            Process process = Runtime.getRuntime().exec(new String[]{"sh", "-c", command});
            
            BufferedReader outputReader = new BufferedReader(
                new InputStreamReader(process.getInputStream()));
            BufferedReader errorReader = new BufferedReader(
                new InputStreamReader(process.getErrorStream()));
            
            String line;
            while ((line = outputReader.readLine()) != null) {
                System.out.println(line);
            }
            
            boolean hasErrors = false;
            while ((line = errorReader.readLine()) != null) {
                System.out.println("ERROR: " + line);
                hasErrors = true;
            }
            
            if (!hasErrors) {
                System.out.println("=== Operation completed successfully ===");
            }
            
        } catch (IOException e) {
            System.out.println("Error executing command: " + e.getMessage());
        }
    }
    
    public static void main(String[] args) throws IOException {
        Main manager = new Main();
        manager.startMenu();
    }
}