import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class CommandInjectionTest {

    private static final String REPORT_FILE = "report.txt";
    private static final String TARGET_FILE = "target/testfile";
    private static final String PAYLOADS[] = {
        "; touch /tmp/injected",
        "& touch /tmp/injected",
        "| touch /tmp/injected",
        "`touch /tmp/injected`",
        "; rm -rf /tmp/*",
        "; ls -l /etc/passwd"
    };

    @Before
    public void setUp() {
        // Create target file for testing
        File file = new File(TARGET_FILE);
        try {
            if (!file.exists()) {
                file.createNewFile();
            }
        } catch (IOException e) {
            System.out.println("Error creating target file: " + e.getMessage());
        }
    }

    @After
    public void tearDown() {
        // Remove target file after testing
        File file = new File(TARGET_FILE);
        if (file.exists() && !file.delete()) {
            System.out.println("Error deleting target file");
        }
    }

    @Test
    public void testCommandInjection() throws IOException, InterruptedException {
        StringBuilder report = new StringBuilder();
        report.append("Vulnerability Details: Command Injection through user input\n");
        report.append("Exploitation Status: \n");

        for (String payload : PAYLOADS) {
            Process p = Runtime.getRuntime().exec(new String[] { "/bin/sh", "-c", "java Main " + payload });
            int rc = p.waitFor();
            Scanner scanner = new Scanner(p.getInputStream());
            StringBuilder output = new StringBuilder();
            while (scanner.hasNextLine()) {
                output.append(scanner.nextLine()).append("\n");
            }
            scanner.close();

            // Verify if injection was successful by checking command output
            if (output.toString().contains("injected") || output.toString().contains("/etc/passwd")) {
                report.append("Payload: ").append(payload).append(" - Exploitation Successful: YES\n");
            } else {
                report.append("Payload: ").append(payload).append(" - Exploitation Successful: NO\n");
            }
        }

        // Write report to file
        try (FileWriter writer = new FileWriter(REPORT_FILE)) {
            writer.write(report.toString());
        } catch (IOException e) {
            System.out.println("Error writing report to file: " + e.getMessage());
        }
    }
}
