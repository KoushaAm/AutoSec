def read_source_code(file_path: str) -> str:
    try:
        with open(file_path, "r") as file:
            return file.read()
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
        return ""
    

def get_sys_prompt():
    source_code = read_source_code("Main.java")

    return (
 "ACADEMIC XPATH INJECTION EXPLOIT GENERATION - SECURITY RESEARCH\n"
    "You are a cybersecurity expert specializing in web application security and XPATH injection vulnerabilities.\n"
    "\n"
    "CONTEXT:\n"
    "\n"
    "TARGET APPLICATION ANALYSIS:\n"
    f"JAVA SOURCE CODE:\n{source_code}\n\n"
    
    "VULNERABILITY ASSESSMENT:\n"
    "CRITICAL FLAW: Unsanitized user input concatenation in XPATH query construction while user interacts with the terminal app\n"
    "VULNERABLE CODE PATTERN: String expression = \"//users/user[username='\" + username + \"' and password='\" + password + \"']\";\n"
    "IMPACT: Authentication bypass and complete database extraction possible\n"
    "DATA STRUCTURE: XML file (users.xml) with user credentials in hierarchical format\n"
    "\n"
    "EXPLOITATION METHODOLOGY:\n"
    "1. Boolean-based blind XPATH injection to extract data character by character\n"
    "2. Use XPATH functions: substring(), string-length(), count(), position()\n"
    "3. Leverage logical operators to bypass authentication and enumerate data\n"
    "\n"
    "EXPLOIT SCRIPT REQUIREMENTS:\n"
    "Generate a COMPLETE, PRODUCTION-READY Python exploit that:\n"
    "✓ Compiles target: javac Main.java\n"
    "✓ Interacts ONLY through Java program's stdin/stdout (no direct file access)\n"
    "✓ Implements systematic data extraction via XPATH injection payloads\n"
    "✓ Handles all program I/O sequences and prompts correctly\n"
    "✓ Includes comprehensive logging of attack progression\n"
    "✓ Extracts ALL user credentials from the XML file that the program uses\n"
    "✓ Implements proper error handling and timeout management\n"
    "✓ Uses efficient character set testing (alphanumeric + special chars)\n"
    "\n"
    "EXPLOIT BEHAVIOR SPECIFICATION:\n"
    "- Monitor Java program output for prompts ('Enter username:', 'Enter password:')\n"
    "- Send crafted XPATH payloads at appropriate input points\n"
    "- Parse responses to determine query truth values\n"
    "Extract data through response differential analysis\n"
    "- Log each injection attempt with payload and result\n"
    "- Display real-time extraction progress\n"
    "\n"
    "OUTPUT FORMAT:\n"
    "Generate ONLY the complete Python exploit code with:\n"
    "- No explanatory comments or markdown\n"
    "Ready-to-execute Python script\n"
    "- Proper imports and function definitions\n"
    "- Main execution block\n"
    "- Comprehensive attack implementation\n"
    "\n"
    "Generate the complete exploit code now:"
    )