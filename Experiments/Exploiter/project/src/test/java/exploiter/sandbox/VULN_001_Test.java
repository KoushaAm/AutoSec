package exploiter.sandbox;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.io.IOException;

public class VULN_001_Test {

    @Test
    public void testCmdInjectionCreatesTmpFile_andWritesResult() throws Exception {
        // --- INPUT that attempts to trigger command injection ---
        String input = "; touch /tmp/testfile";

        // Paths for result file and the artifact the exploit should create
        Path resultPath = Paths.get("target/test-result.txt");
        Path exploitedTmp = Paths.get("/tmp/testfile");

        // Clean up any past runs
        Files.deleteIfExists(resultPath);
        Files.deleteIfExists(exploitedTmp);

        try {
            // Run Main with the malicious input
            Main.main(new String[]{input});

            // Check whether the exploit created the /tmp/testfile
            boolean created = Files.exists(exploitedTmp);

            // Prepare readable result text
            String vulnName = "VULN_001 - Command Injection";
            String verifiedLine = "vulnerability name: " + vulnName + " | verified: " + (created ? "true" : "false") + "\n";
            String extra = "input=\"" + input + "\"\n";

            Files.createDirectories(resultPath.getParent());
            Files.write(resultPath, (verifiedLine + extra).getBytes(StandardCharsets.UTF_8));

            // Assert so that the test is considered failing in CI if not created
            Assertions.assertTrue(created, "Exploit did not create /tmp/testfile");

            System.out.println("✅ Test passed. Wrote result file: " + resultPath.toString());
        } catch (Throwable t) {
            // On failure, write a fail line for easy inspection
            String failLine = "vulnerability name: VULN_001 - Command Injection | verified: false\n";
            String err = "error=" + t.toString() + "\n";

            Files.createDirectories(resultPath.getParent());
            Files.write(resultPath, (failLine + err).getBytes(StandardCharsets.UTF_8));

            System.err.println("❌ Test failed. Wrote result file: " + resultPath.toString());
            throw t;
        } finally {
            // optional: cleanup the artifact so future runs are deterministic
            // Files.deleteIfExists(exploitedTmp);
        }
    }
}
